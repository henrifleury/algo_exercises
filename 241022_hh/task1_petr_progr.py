'''
После очередного завершённого проекта программист Пётр решил переехать в деревню и заняться сельским хозяйством. Мелочиться он не стал, поэтому помимо домика в деревне сразу приобрёл несколько идущих подряд параллельных участков поля, расположенных вдоль прямой дороги. Участки были разделены заборами, при этом все заборы начинались от той самой дороги, но заканчивались на разном удалении от неё не доходя до противоположной границы участка.

Петру нужно объединить эти участки. Но так как Пётр перфекционист, он непременно хочет, чтобы получившийся объединённый участок:

1. был прямоугольным;

2. был ограничен дорогой и двумя уже имеющимися заборами (забор необязательно использовать целиком, а вот удлинять забор нельзя);

3. имел наибольшую возможную площадь.

Как и положено разработчику Пётр получает 300к/наносек, поэтому его совсем не беспокоит тот факт, что часть территории окажется неиспользованной.

Пётр хочет отдохнуть, поэтому он попросил вас помочь с нахождением площади такого участка.

Помогите Петру и найдите два забора, которые вместе с дорогой образуют максимальный по площади прямоугольный участок, и выведите эту площадь.

Ширина всех участков одинакова и равна 1.
'''

def max_area(heights):
    max_s = 0
    l, r =0, len(heights)-1
    while l<r:
        cur_s = (r-l) * min(heights[l], heights[r])
        if cur_s>max_s:
            max_s = cur_s
        if heights[l] < heights[r]:
            l += 1
        else:
            r -= 1
        #break
    return max_s
h_l = list(map(int, input().split()))
print(max_area(h_l))

assert max_area(list(map(int, '2 4 3 2 1 4 1'.split()))) == 16
h_l = list(map(int, '2 4 3'.split()))
assert max_area(h_l) == 4
h_l = list(map(int, '2 4'.split()))
assert max_area(h_l) == 2
h_l = list(map(int, '1 2'.split()))
assert max_area(h_l) == 1